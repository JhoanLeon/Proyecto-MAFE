CCS PCM C Compiler, Version 4.114, 93460303               07-oct.-17 15:33

               Filename: C:\Users\FAMILIA-LEON\Desktop\MAFE PIC\Sensor de Temperatura\Temperaura.lst

               ROM used: 2292 words (28%)
                         Largest free fragment is 2048
               RAM used: 12 (3%) at main() level
                         36 (10%) worst case
               Stack:    5 locations

*
0000:  MOVLW  08
0001:  MOVWF  0A
0002:  GOTO   000
0003:  NOP
.................... #include <16f877a.h> 
.................... //////// Standard Header file for the PIC16F877A device //////////////// 
.................... #device PIC16F877A 
.................... #list 
....................  
.................... #fuses NOWDT, XT, NOPUT, NOPROTECT, NODEBUG, NOBROWNOUT, NOLVP, NOCPD, NOWRT 
.................... #device adc=10 
.................... #use delay(clock=4M) 
*
007C:  MOVLW  33
007D:  MOVWF  04
007E:  BCF    03.7
007F:  MOVF   00,W
0080:  BTFSC  03.2
0081:  GOTO   090
0082:  MOVLW  01
0083:  MOVWF  78
0084:  CLRF   77
0085:  DECFSZ 77,F
0086:  GOTO   085
0087:  DECFSZ 78,F
0088:  GOTO   084
0089:  MOVLW  4A
008A:  MOVWF  77
008B:  DECFSZ 77,F
008C:  GOTO   08B
008D:  GOTO   08E
008E:  DECFSZ 00,F
008F:  GOTO   082
0090:  RETURN
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    BOOLEAN enable;           // on to an I/O port to gain 
....................    BOOLEAN rs;               // access to the LCD pins. 
....................    BOOLEAN rw;               // The bits are allocated from 
....................    BOOLEAN unused;           // low order up.  ENABLE will 
....................    int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... BYTE const LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................  
.................... BYTE lcd_read_nibble(void); 
....................  
.................... BYTE lcd_read_byte(void) 
.................... { 
....................    BYTE low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
....................    output_float(LCD_DATA5); 
....................    output_float(LCD_DATA6); 
....................    output_float(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0xF; 
*
00A9:  MOVLW  0F
00AA:  BSF    03.5
00AB:  ANDWF  08,W
00AC:  IORLW  F0
00AD:  MOVWF  08
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
00AE:  BCF    03.5
00AF:  BSF    08.2
....................    delay_cycles(1); 
00B0:  NOP
....................    lcd_output_enable(1); 
00B1:  BSF    08.0
....................    delay_cycles(1); 
00B2:  NOP
....................    high = lcd_read_nibble(); 
00B3:  CALL   09D
00B4:  MOVF   78,W
00B5:  MOVWF  3A
....................        
....................    lcd_output_enable(0); 
00B6:  BCF    08.0
....................    delay_cycles(1); 
00B7:  NOP
....................    lcd_output_enable(1); 
00B8:  BSF    08.0
....................    delay_us(1); 
00B9:  NOP
....................    low = lcd_read_nibble(); 
00BA:  CALL   09D
00BB:  MOVF   78,W
00BC:  MOVWF  39
....................        
....................    lcd_output_enable(0); 
00BD:  BCF    08.0
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00BE:  MOVLW  0F
00BF:  BSF    03.5
00C0:  ANDWF  08,W
00C1:  MOVWF  08
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00C2:  BCF    03.5
00C3:  SWAPF  3A,W
00C4:  MOVWF  77
00C5:  MOVLW  F0
00C6:  ANDWF  77,F
00C7:  MOVF   77,W
00C8:  IORWF  39,W
00C9:  MOVWF  78
.................... } 
....................  
.................... BYTE lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    BYTE n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
....................    n |= input(LCD_DATA5) << 1; 
....................    n |= input(LCD_DATA6) << 2; 
....................    n |= input(LCD_DATA7) << 3; 
....................     
....................    return(n); 
....................   #else 
....................    return(lcd.data); 
*
009D:  MOVF   08,W
009E:  MOVWF  77
009F:  SWAPF  08,W
00A0:  ANDLW  0F
00A1:  MOVWF  78
....................   #endif 
.................... } 
00A2:  RETURN
....................  
.................... void lcd_send_nibble(BYTE n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
....................   #else       
....................    lcdlat.data = n; 
*
0091:  SWAPF  3A,W
0092:  ANDLW  F0
0093:  MOVWF  77
0094:  MOVLW  0F
0095:  ANDWF  08,W
0096:  IORWF  77,W
0097:  MOVWF  08
....................   #endif 
....................        
....................    delay_cycles(1); 
0098:  NOP
....................    lcd_output_enable(1); 
0099:  BSF    08.0
....................    delay_us(2); 
009A:  GOTO   09B
....................    lcd_output_enable(0); 
009B:  BCF    08.0
.................... } 
009C:  RETURN
....................  
.................... void lcd_send_byte(BYTE address, BYTE n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
*
00A3:  BSF    03.5
00A4:  BCF    08.0
....................    lcd_rs_tris(); 
00A5:  BCF    08.1
....................    lcd_rw_tris(); 
00A6:  BCF    08.2
....................   #endif 
....................  
....................    lcd_output_rs(0); 
00A7:  BCF    03.5
00A8:  BCF    08.1
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
*
00CA:  MOVF   78,W
00CB:  MOVWF  39
00CC:  BTFSC  39.7
00CD:  GOTO   0A9
....................    lcd_output_rs(address); 
00CE:  BTFSS  37.0
00CF:  BCF    08.1
00D0:  BTFSC  37.0
00D1:  BSF    08.1
....................    delay_cycles(1); 
00D2:  NOP
....................    lcd_output_rw(0); 
00D3:  BCF    08.2
....................    delay_cycles(1); 
00D4:  NOP
....................    lcd_output_enable(0); 
00D5:  BCF    08.0
....................    lcd_send_nibble(n >> 4); 
00D6:  SWAPF  38,W
00D7:  MOVWF  39
00D8:  MOVLW  0F
00D9:  ANDWF  39,F
00DA:  MOVF   39,W
00DB:  MOVWF  3A
00DC:  CALL   091
....................    lcd_send_nibble(n & 0xf); 
00DD:  MOVF   38,W
00DE:  ANDLW  0F
00DF:  MOVWF  39
00E0:  MOVWF  3A
00E1:  CALL   091
.................... } 
00E2:  RETURN
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    BYTE i; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
....................    output_drive(LCD_DATA5); 
....................    output_drive(LCD_DATA6); 
....................    output_drive(LCD_DATA7); 
....................   #else 
....................    lcdtris.data = 0x0; 
00E3:  MOVLW  0F
00E4:  BSF    03.5
00E5:  ANDWF  08,W
00E6:  MOVWF  08
....................   #endif 
....................    lcd_enable_tris(); 
00E7:  BCF    08.0
....................    lcd_rs_tris(); 
00E8:  BCF    08.1
....................    lcd_rw_tris(); 
00E9:  BCF    08.2
....................  #endif 
....................  
....................    lcd_output_rs(0); 
00EA:  BCF    03.5
00EB:  BCF    08.1
....................    lcd_output_rw(0); 
00EC:  BCF    08.2
....................    lcd_output_enable(0); 
00ED:  BCF    08.0
....................      
....................    delay_ms(15); 
00EE:  MOVLW  0F
00EF:  MOVWF  33
00F0:  CALL   07C
....................    for(i=1;i<=3;++i) 
00F1:  MOVLW  01
00F2:  MOVWF  25
00F3:  MOVF   25,W
00F4:  SUBLW  03
00F5:  BTFSS  03.0
00F6:  GOTO   101
....................    { 
....................        lcd_send_nibble(3); 
00F7:  MOVLW  03
00F8:  MOVWF  3A
00F9:  CALL   091
....................        lcd_send_nibble(0); 
00FA:  CLRF   3A
00FB:  CALL   091
....................        delay_ms(5); 
00FC:  MOVLW  05
00FD:  MOVWF  33
00FE:  CALL   07C
....................    } 
00FF:  INCF   25,F
0100:  GOTO   0F3
....................     
....................    lcd_send_nibble(2); 
0101:  MOVLW  02
0102:  MOVWF  3A
0103:  CALL   091
....................    lcd_send_nibble(0); 
0104:  CLRF   3A
0105:  CALL   091
....................    delay_ms(5); 
0106:  MOVLW  05
0107:  MOVWF  33
0108:  CALL   07C
....................    for(i=0;i<=3;++i) 
0109:  CLRF   25
010A:  MOVF   25,W
010B:  SUBLW  03
010C:  BTFSS  03.0
010D:  GOTO   117
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
010E:  MOVF   25,W
010F:  CALL   004
0110:  MOVWF  26
0111:  CLRF   37
0112:  MOVF   26,W
0113:  MOVWF  38
0114:  CALL   0A3
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0115:  INCF   25,F
0116:  GOTO   10A
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
0117:  RETURN
....................  
.................... void lcd_gotoxy(BYTE x, BYTE y) 
.................... { 
....................    BYTE address; 
....................     
....................    if(y!=1) 
0118:  DECFSZ 34,W
0119:  GOTO   11B
011A:  GOTO   11E
....................       address=LCD_LINE_TWO; 
011B:  MOVLW  40
011C:  MOVWF  35
....................    else 
011D:  GOTO   11F
....................       address=0; 
011E:  CLRF   35
....................       
....................    address+=x-1; 
011F:  MOVLW  01
0120:  SUBWF  33,W
0121:  ADDWF  35,F
....................    lcd_send_byte(0,0x80|address); 
0122:  MOVF   35,W
0123:  IORLW  80
0124:  MOVWF  36
0125:  CLRF   37
0126:  MOVF   36,W
0127:  MOVWF  38
0128:  CALL   0A3
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
0129:  RETURN
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
....................    { 
012A:  MOVF   32,W
012B:  XORLW  07
012C:  BTFSC  03.2
012D:  GOTO   138
012E:  XORLW  0B
012F:  BTFSC  03.2
0130:  GOTO   13D
0131:  XORLW  06
0132:  BTFSC  03.2
0133:  GOTO   145
0134:  XORLW  02
0135:  BTFSC  03.2
0136:  GOTO   14B
0137:  GOTO   150
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0138:  MOVLW  01
0139:  MOVWF  33
013A:  MOVWF  34
013B:  CALL   118
013C:  GOTO   156
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
013D:  CLRF   37
013E:  MOVLW  01
013F:  MOVWF  38
0140:  CALL   0A3
....................                      delay_ms(2); 
0141:  MOVLW  02
0142:  MOVWF  33
0143:  CALL   07C
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0144:  GOTO   156
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0145:  MOVLW  01
0146:  MOVWF  33
0147:  MOVLW  02
0148:  MOVWF  34
0149:  CALL   118
014A:  GOTO   156
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
014B:  CLRF   37
014C:  MOVLW  10
014D:  MOVWF  38
014E:  CALL   0A3
014F:  GOTO   156
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0150:  MOVLW  01
0151:  MOVWF  37
0152:  MOVF   32,W
0153:  MOVWF  38
0154:  CALL   0A3
0155:  GOTO   156
....................      #endif 
....................    } 
.................... } 
0156:  RETURN
....................   
.................... char lcd_getc(BYTE x, BYTE y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... #define  portb=0x06; 
....................  
.................... #define LCD_ENABLE_PIN  PIN_D0 
.................... #define LCD_RS_PIN      PIN_D1                          
.................... #define LCD_RW_PIN      PIN_D2                              
.................... #define LCD_DATA4       PIN_D4                                 
.................... #define LCD_DATA5       PIN_D5                                    
.................... #define LCD_DATA6       PIN_D6                                     
.................... #define LCD_DATA7       PIN_D7  
....................  
.................... float Temperatura; 
....................  
.................... void main(void) 
.................... { 
*
007B:  DATA 00,00
*
0800:  CLRF   04
0801:  BCF    03.7
0802:  MOVLW  1F
0803:  ANDWF  03,F
0804:  MOVLW  FF
0805:  MOVWF  24
0806:  BSF    03.5
0807:  BSF    1F.0
0808:  BSF    1F.1
0809:  BSF    1F.2
080A:  BCF    1F.3
080B:  MOVLW  07
080C:  MOVWF  1C
....................   set_tris_b(0b11111000); 
080D:  MOVLW  F8
080E:  MOVWF  06
....................   set_tris_c(0b11111111); 
080F:  MOVLW  FF
0810:  MOVWF  07
0811:  BCF    03.5
0812:  MOVWF  24
....................   set_tris_d(0b00000000); 
0813:  MOVLW  00
0814:  BSF    03.5
0815:  MOVWF  08
....................   set_tris_e(0b000); 
0816:  BCF    09.0
0817:  BCF    09.1
0818:  BCF    09.2
....................   setup_adc_ports (RA0_ANALOG); 
0819:  BCF    1F.0
081A:  BSF    1F.1
081B:  BSF    1F.2
081C:  BSF    1F.3
....................   setup_adc (ADC_CLOCK_INTERNAL); 
081D:  BCF    1F.6
081E:  BCF    03.5
081F:  BSF    1F.6
0820:  BSF    1F.7
0821:  BSF    03.5
0822:  BSF    1F.7
0823:  BCF    03.5
0824:  BSF    1F.0
....................   setup_COUNTERS (RTCC_internal.rtcc_div_1); 
0825:  MOVLW  08
0826:  MOVWF  77
0827:  CLRF   01
0828:  MOVLW  81
0829:  MOVWF  04
082A:  BCF    03.7
082B:  MOVF   00,W
082C:  ANDLW  C0
082D:  IORLW  07
082E:  MOVWF  00
082F:  CLRWDT
0830:  MOVF   00,W
0831:  ANDLW  C7
0832:  BTFSC  77.3
0833:  ANDLW  C0
0834:  IORWF  77,W
0835:  MOVWF  00
....................   set_adc_channel(0); 
0836:  MOVLW  00
0837:  MOVWF  78
0838:  MOVF   1F,W
0839:  ANDLW  C7
083A:  IORWF  78,W
083B:  MOVWF  1F
....................    
.................... lcd_init(); 
083C:  BCF    0A.3
083D:  CALL   0E3
083E:  BSF    0A.3
.................... lcd_gotoxy(3,1); 
083F:  MOVLW  03
0840:  MOVWF  33
0841:  MOVLW  01
0842:  MOVWF  34
0843:  BCF    0A.3
0844:  CALL   118
0845:  BSF    0A.3
.................... printf(lcd_putc,"HOLA USUARIO"); 
0846:  MOVLW  0C
0847:  BSF    03.6
0848:  MOVWF  0D
0849:  MOVLW  00
084A:  MOVWF  0F
084B:  BCF    0A.3
084C:  BCF    03.6
084D:  CALL   157
084E:  BSF    0A.3
.................... delay_ms(1000); 
084F:  MOVLW  04
0850:  MOVWF  25
0851:  MOVLW  FA
0852:  MOVWF  33
0853:  BCF    0A.3
0854:  CALL   07C
0855:  BSF    0A.3
0856:  DECFSZ 25,F
0857:  GOTO   051
.................... lcd_gotoxy(4,2); 
0858:  MOVLW  04
0859:  MOVWF  33
085A:  MOVLW  02
085B:  MOVWF  34
085C:  BCF    0A.3
085D:  CALL   118
085E:  BSF    0A.3
.................... printf(lcd_putc,"BIENVENIDO"); 
085F:  MOVLW  13
0860:  BSF    03.6
0861:  MOVWF  0D
0862:  MOVLW  00
0863:  MOVWF  0F
0864:  BCF    0A.3
0865:  BCF    03.6
0866:  CALL   157
0867:  BSF    0A.3
.................... delay_ms(1000); 
0868:  MOVLW  04
0869:  MOVWF  25
086A:  MOVLW  FA
086B:  MOVWF  33
086C:  BCF    0A.3
086D:  CALL   07C
086E:  BSF    0A.3
086F:  DECFSZ 25,F
0870:  GOTO   06A
.................... lcd_init(); 
0871:  BCF    0A.3
0872:  CALL   0E3
0873:  BSF    0A.3
.................... lcd_gotoxy(2,1); 
0874:  MOVLW  02
0875:  MOVWF  33
0876:  MOVLW  01
0877:  MOVWF  34
0878:  BCF    0A.3
0879:  CALL   118
087A:  BSF    0A.3
.................... printf(lcd_putc,"PROYECTO MAFE"); 
087B:  MOVLW  19
087C:  BSF    03.6
087D:  MOVWF  0D
087E:  MOVLW  00
087F:  MOVWF  0F
0880:  BCF    0A.3
0881:  BCF    03.6
0882:  CALL   157
0883:  BSF    0A.3
.................... delay_ms(1000); 
0884:  MOVLW  04
0885:  MOVWF  25
0886:  MOVLW  FA
0887:  MOVWF  33
0888:  BCF    0A.3
0889:  CALL   07C
088A:  BSF    0A.3
088B:  DECFSZ 25,F
088C:  GOTO   086
.................... lcd_init(); 
088D:  BCF    0A.3
088E:  CALL   0E3
088F:  BSF    0A.3
....................  
.................... output_high(pin_E0); 
0890:  BSF    03.5
0891:  BCF    09.0
0892:  BCF    03.5
0893:  BSF    09.0
.................... delay_ms(100); 
0894:  MOVLW  64
0895:  MOVWF  33
0896:  BCF    0A.3
0897:  CALL   07C
0898:  BSF    0A.3
.................... output_low(pin_E0); 
0899:  BSF    03.5
089A:  BCF    09.0
089B:  BCF    03.5
089C:  BCF    09.0
.................... delay_ms(500); 
089D:  MOVLW  02
089E:  MOVWF  25
089F:  MOVLW  FA
08A0:  MOVWF  33
08A1:  BCF    0A.3
08A2:  CALL   07C
08A3:  BSF    0A.3
08A4:  DECFSZ 25,F
08A5:  GOTO   09F
....................    
....................   while (true) 
....................   { 
....................   output_c(1); 
08A6:  MOVLW  00
08A7:  MOVWF  24
08A8:  BSF    03.5
08A9:  CLRF   07
08AA:  MOVLW  01
08AB:  BCF    03.5
08AC:  MOVWF  07
....................   Temperatura=read_adc()/2; 
08AD:  BSF    1F.2
08AE:  BTFSC  1F.2
08AF:  GOTO   0AE
08B0:  BSF    03.5
08B1:  MOVF   1E,W
08B2:  BCF    03.5
08B3:  MOVWF  25
08B4:  MOVF   1E,W
08B5:  MOVWF  26
08B6:  BCF    03.0
08B7:  RRF    26,W
08B8:  MOVWF  7A
08B9:  RRF    25,W
08BA:  MOVWF  79
08BB:  MOVWF  25
08BC:  MOVF   7A,W
08BD:  MOVWF  26
08BE:  BCF    0A.3
08BF:  GOTO   19D
08C0:  BSF    0A.3
08C1:  MOVF   7A,W
08C2:  MOVWF  23
08C3:  MOVF   79,W
08C4:  MOVWF  22
08C5:  MOVF   78,W
08C6:  MOVWF  21
08C7:  MOVF   77,W
08C8:  MOVWF  20
....................   Temperatura = Temperatura - 1; 
08C9:  BSF    03.1
08CA:  MOVF   23,W
08CB:  MOVWF  28
08CC:  MOVF   22,W
08CD:  MOVWF  27
08CE:  MOVF   21,W
08CF:  MOVWF  26
08D0:  MOVF   20,W
08D1:  MOVWF  25
08D2:  CLRF   2C
08D3:  CLRF   2B
08D4:  CLRF   2A
08D5:  MOVLW  7F
08D6:  MOVWF  29
08D7:  BCF    0A.3
08D8:  GOTO   1BC
08D9:  BSF    0A.3
08DA:  MOVF   7A,W
08DB:  MOVWF  23
08DC:  MOVF   79,W
08DD:  MOVWF  22
08DE:  MOVF   78,W
08DF:  MOVWF  21
08E0:  MOVF   77,W
08E1:  MOVWF  20
....................   lcd_gotoxy(1,2); 
08E2:  MOVLW  01
08E3:  MOVWF  33
08E4:  MOVLW  02
08E5:  MOVWF  34
08E6:  BCF    0A.3
08E7:  CALL   118
08E8:  BSF    0A.3
....................   printf(lcd_putc,"%f",Temperatura); 
08E9:  MOVLW  89
08EA:  MOVWF  04
08EB:  MOVF   23,W
08EC:  MOVWF  28
08ED:  MOVF   22,W
08EE:  MOVWF  27
08EF:  MOVF   21,W
08F0:  MOVWF  26
08F1:  MOVF   20,W
08F2:  MOVWF  25
08F3:  MOVLW  02
08F4:  MOVWF  29
08F5:  BCF    0A.3
08F6:  GOTO   34E
08F7:  BSF    0A.3
....................   lcd_gotoxy(5,2); 
08F8:  MOVLW  05
08F9:  MOVWF  33
08FA:  MOVLW  02
08FB:  MOVWF  34
08FC:  BCF    0A.3
08FD:  CALL   118
08FE:  BSF    0A.3
....................   printf(lcd_putc," CENTIGRADOS"); 
08FF:  MOVLW  20
0900:  BSF    03.6
0901:  MOVWF  0D
0902:  MOVLW  00
0903:  MOVWF  0F
0904:  BCF    0A.3
0905:  BCF    03.6
0906:  CALL   157
0907:  BSF    0A.3
....................  
....................       if(temperatura>=40) 
0908:  CLRF   28
0909:  CLRF   27
090A:  MOVLW  20
090B:  MOVWF  26
090C:  MOVLW  84
090D:  MOVWF  25
090E:  MOVF   23,W
090F:  MOVWF  2C
0910:  MOVF   22,W
0911:  MOVWF  2B
0912:  MOVF   21,W
0913:  MOVWF  2A
0914:  MOVF   20,W
0915:  MOVWF  29
0916:  BCF    0A.3
0917:  CALL   4A3
0918:  BSF    0A.3
0919:  BTFSC  03.0
091A:  GOTO   11D
091B:  BTFSS  03.2
091C:  GOTO   153
....................       { 
....................          output_high(pin_E0); 
091D:  BSF    03.5
091E:  BCF    09.0
091F:  BCF    03.5
0920:  BSF    09.0
....................          delay_ms(250); 
0921:  MOVLW  FA
0922:  MOVWF  33
0923:  BCF    0A.3
0924:  CALL   07C
0925:  BSF    0A.3
....................          output_low(pin_E0); 
0926:  BSF    03.5
0927:  BCF    09.0
0928:  BCF    03.5
0929:  BCF    09.0
....................          delay_ms(150); 
092A:  MOVLW  96
092B:  MOVWF  33
092C:  BCF    0A.3
092D:  CALL   07C
092E:  BSF    0A.3
....................          output_high(pin_E0); 
092F:  BSF    03.5
0930:  BCF    09.0
0931:  BCF    03.5
0932:  BSF    09.0
....................          delay_ms(250); 
0933:  MOVLW  FA
0934:  MOVWF  33
0935:  BCF    0A.3
0936:  CALL   07C
0937:  BSF    0A.3
....................          output_low(pin_E0); 
0938:  BSF    03.5
0939:  BCF    09.0
093A:  BCF    03.5
093B:  BCF    09.0
....................          delay_ms(150); 
093C:  MOVLW  96
093D:  MOVWF  33
093E:  BCF    0A.3
093F:  CALL   07C
0940:  BSF    0A.3
....................          output_high(pin_E0); 
0941:  BSF    03.5
0942:  BCF    09.0
0943:  BCF    03.5
0944:  BSF    09.0
....................          delay_ms(250); 
0945:  MOVLW  FA
0946:  MOVWF  33
0947:  BCF    0A.3
0948:  CALL   07C
0949:  BSF    0A.3
....................          output_low(pin_E0); 
094A:  BSF    03.5
094B:  BCF    09.0
094C:  BCF    03.5
094D:  BCF    09.0
....................          delay_ms(150); 
094E:  MOVLW  96
094F:  MOVWF  33
0950:  BCF    0A.3
0951:  CALL   07C
0952:  BSF    0A.3
....................       } 
....................        
....................       if(temperatura>=36) 
0953:  CLRF   28
0954:  CLRF   27
0955:  MOVLW  10
0956:  MOVWF  26
0957:  MOVLW  84
0958:  MOVWF  25
0959:  MOVF   23,W
095A:  MOVWF  2C
095B:  MOVF   22,W
095C:  MOVWF  2B
095D:  MOVF   21,W
095E:  MOVWF  2A
095F:  MOVF   20,W
0960:  MOVWF  29
0961:  BCF    0A.3
0962:  CALL   4A3
0963:  BSF    0A.3
0964:  BTFSC  03.0
0965:  GOTO   168
0966:  BTFSS  03.2
0967:  GOTO   188
....................       { 
....................          lcd_gotoxy(1,1); 
0968:  MOVLW  01
0969:  MOVWF  33
096A:  MOVWF  34
096B:  BCF    0A.3
096C:  CALL   118
096D:  BSF    0A.3
....................          printf(lcd_putc,"TEMPERATURA ALTA"); 
096E:  MOVLW  27
096F:  BSF    03.6
0970:  MOVWF  0D
0971:  MOVLW  00
0972:  MOVWF  0F
0973:  BCF    0A.3
0974:  BCF    03.6
0975:  CALL   157
0976:  BSF    0A.3
....................          delay_ms (1000); 
0977:  MOVLW  04
0978:  MOVWF  25
0979:  MOVLW  FA
097A:  MOVWF  33
097B:  BCF    0A.3
097C:  CALL   07C
097D:  BSF    0A.3
097E:  DECFSZ 25,F
097F:  GOTO   179
....................          lcd_init(); 
0980:  BCF    0A.3
0981:  CALL   0E3
0982:  BSF    0A.3
....................          delay_ms(100); 
0983:  MOVLW  64
0984:  MOVWF  33
0985:  BCF    0A.3
0986:  CALL   07C
0987:  BSF    0A.3
....................       } 
....................        
....................      if(Temperatura<=23) 
0988:  MOVF   23,W
0989:  MOVWF  28
098A:  MOVF   22,W
098B:  MOVWF  27
098C:  MOVF   21,W
098D:  MOVWF  26
098E:  MOVF   20,W
098F:  MOVWF  25
0990:  CLRF   2C
0991:  CLRF   2B
0992:  MOVLW  38
0993:  MOVWF  2A
0994:  MOVLW  83
0995:  MOVWF  29
0996:  BCF    0A.3
0997:  CALL   4A3
0998:  BSF    0A.3
0999:  BTFSC  03.0
099A:  GOTO   19D
099B:  BTFSS  03.2
099C:  GOTO   1BD
....................       { 
....................          lcd_gotoxy(1,1); 
099D:  MOVLW  01
099E:  MOVWF  33
099F:  MOVWF  34
09A0:  BCF    0A.3
09A1:  CALL   118
09A2:  BSF    0A.3
....................          printf(lcd_putc,"TEMPERATURA BAJA");          
09A3:  MOVLW  30
09A4:  BSF    03.6
09A5:  MOVWF  0D
09A6:  MOVLW  00
09A7:  MOVWF  0F
09A8:  BCF    0A.3
09A9:  BCF    03.6
09AA:  CALL   157
09AB:  BSF    0A.3
....................          delay_ms (1000); 
09AC:  MOVLW  04
09AD:  MOVWF  25
09AE:  MOVLW  FA
09AF:  MOVWF  33
09B0:  BCF    0A.3
09B1:  CALL   07C
09B2:  BSF    0A.3
09B3:  DECFSZ 25,F
09B4:  GOTO   1AE
....................          lcd_init(); 
09B5:  BCF    0A.3
09B6:  CALL   0E3
09B7:  BSF    0A.3
....................          delay_ms(100); 
09B8:  MOVLW  64
09B9:  MOVWF  33
09BA:  BCF    0A.3
09BB:  CALL   07C
09BC:  BSF    0A.3
....................       } 
....................           
....................      if(Temperatura<=35 && Temperatura>=24) 
09BD:  MOVF   23,W
09BE:  MOVWF  28
09BF:  MOVF   22,W
09C0:  MOVWF  27
09C1:  MOVF   21,W
09C2:  MOVWF  26
09C3:  MOVF   20,W
09C4:  MOVWF  25
09C5:  CLRF   2C
09C6:  CLRF   2B
09C7:  MOVLW  0C
09C8:  MOVWF  2A
09C9:  MOVLW  84
09CA:  MOVWF  29
09CB:  BCF    0A.3
09CC:  CALL   4A3
09CD:  BSF    0A.3
09CE:  BTFSC  03.0
09CF:  GOTO   1D2
09D0:  BTFSS  03.2
09D1:  GOTO   207
09D2:  CLRF   28
09D3:  CLRF   27
09D4:  MOVLW  40
09D5:  MOVWF  26
09D6:  MOVLW  83
09D7:  MOVWF  25
09D8:  MOVF   23,W
09D9:  MOVWF  2C
09DA:  MOVF   22,W
09DB:  MOVWF  2B
09DC:  MOVF   21,W
09DD:  MOVWF  2A
09DE:  MOVF   20,W
09DF:  MOVWF  29
09E0:  BCF    0A.3
09E1:  CALL   4A3
09E2:  BSF    0A.3
09E3:  BTFSC  03.0
09E4:  GOTO   1E7
09E5:  BTFSS  03.2
09E6:  GOTO   207
....................       { 
....................          lcd_gotoxy(1,1); 
09E7:  MOVLW  01
09E8:  MOVWF  33
09E9:  MOVWF  34
09EA:  BCF    0A.3
09EB:  CALL   118
09EC:  BSF    0A.3
....................          printf(lcd_putc,"TEMPERTA. NORMAL");          
09ED:  MOVLW  39
09EE:  BSF    03.6
09EF:  MOVWF  0D
09F0:  MOVLW  00
09F1:  MOVWF  0F
09F2:  BCF    0A.3
09F3:  BCF    03.6
09F4:  CALL   157
09F5:  BSF    0A.3
....................          delay_ms (1000); 
09F6:  MOVLW  04
09F7:  MOVWF  25
09F8:  MOVLW  FA
09F9:  MOVWF  33
09FA:  BCF    0A.3
09FB:  CALL   07C
09FC:  BSF    0A.3
09FD:  DECFSZ 25,F
09FE:  GOTO   1F8
....................          lcd_init(); 
09FF:  BCF    0A.3
0A00:  CALL   0E3
0A01:  BSF    0A.3
....................          delay_ms(100); 
0A02:  MOVLW  64
0A03:  MOVWF  33
0A04:  BCF    0A.3
0A05:  CALL   07C
0A06:  BSF    0A.3
....................       } 
....................      output_c(0); 
0A07:  MOVLW  00
0A08:  MOVWF  24
0A09:  BSF    03.5
0A0A:  CLRF   07
0A0B:  BCF    03.5
0A0C:  CLRF   07
....................       
.................... if(input(pin_B7)==1){ 
0A0D:  BSF    03.5
0A0E:  BSF    06.7
0A0F:  BCF    03.5
0A10:  BTFSS  06.7
0A11:  GOTO   245
.................... output_low(pin_B0); 
0A12:  BSF    03.5
0A13:  BCF    06.0
0A14:  BCF    03.5
0A15:  BCF    06.0
.................... lcd_init(); 
0A16:  BCF    0A.3
0A17:  CALL   0E3
0A18:  BSF    0A.3
.................... lcd_gotoxy(3,1); 
0A19:  MOVLW  03
0A1A:  MOVWF  33
0A1B:  MOVLW  01
0A1C:  MOVWF  34
0A1D:  BCF    0A.3
0A1E:  CALL   118
0A1F:  BSF    0A.3
.................... printf(lcd_putc,"MODO CONTROL"); 
0A20:  MOVLW  42
0A21:  BSF    03.6
0A22:  MOVWF  0D
0A23:  MOVLW  00
0A24:  MOVWF  0F
0A25:  BCF    0A.3
0A26:  BCF    03.6
0A27:  CALL   157
0A28:  BSF    0A.3
.................... lcd_gotoxy(5,2); 
0A29:  MOVLW  05
0A2A:  MOVWF  33
0A2B:  MOVLW  02
0A2C:  MOVWF  34
0A2D:  BCF    0A.3
0A2E:  CALL   118
0A2F:  BSF    0A.3
.................... printf(lcd_putc,"ACTIVADO"); 
0A30:  MOVLW  49
0A31:  BSF    03.6
0A32:  MOVWF  0D
0A33:  MOVLW  00
0A34:  MOVWF  0F
0A35:  BCF    0A.3
0A36:  BCF    03.6
0A37:  CALL   157
0A38:  BSF    0A.3
.................... delay_ms(1000); 
0A39:  MOVLW  04
0A3A:  MOVWF  25
0A3B:  MOVLW  FA
0A3C:  MOVWF  33
0A3D:  BCF    0A.3
0A3E:  CALL   07C
0A3F:  BSF    0A.3
0A40:  DECFSZ 25,F
0A41:  GOTO   23B
.................... lcd_init(); 
0A42:  BCF    0A.3
0A43:  CALL   0E3
0A44:  BSF    0A.3
.................... } 
.................... if(input(pin_B6)==1){ 
0A45:  BSF    03.5
0A46:  BSF    06.6
0A47:  BCF    03.5
0A48:  BTFSS  06.6
0A49:  GOTO   27D
.................... output_low(pin_B0); 
0A4A:  BSF    03.5
0A4B:  BCF    06.0
0A4C:  BCF    03.5
0A4D:  BCF    06.0
.................... lcd_init(); 
0A4E:  BCF    0A.3
0A4F:  CALL   0E3
0A50:  BSF    0A.3
.................... lcd_gotoxy(5,1); 
0A51:  MOVLW  05
0A52:  MOVWF  33
0A53:  MOVLW  01
0A54:  MOVWF  34
0A55:  BCF    0A.3
0A56:  CALL   118
0A57:  BSF    0A.3
.................... printf(lcd_putc,"MODO VOZ"); 
0A58:  MOVLW  4E
0A59:  BSF    03.6
0A5A:  MOVWF  0D
0A5B:  MOVLW  00
0A5C:  MOVWF  0F
0A5D:  BCF    0A.3
0A5E:  BCF    03.6
0A5F:  CALL   157
0A60:  BSF    0A.3
.................... lcd_gotoxy(5,2); 
0A61:  MOVLW  05
0A62:  MOVWF  33
0A63:  MOVLW  02
0A64:  MOVWF  34
0A65:  BCF    0A.3
0A66:  CALL   118
0A67:  BSF    0A.3
.................... printf(lcd_putc,"ACTIVADO"); 
0A68:  MOVLW  53
0A69:  BSF    03.6
0A6A:  MOVWF  0D
0A6B:  MOVLW  00
0A6C:  MOVWF  0F
0A6D:  BCF    0A.3
0A6E:  BCF    03.6
0A6F:  CALL   157
0A70:  BSF    0A.3
.................... delay_ms(1000); 
0A71:  MOVLW  04
0A72:  MOVWF  25
0A73:  MOVLW  FA
0A74:  MOVWF  33
0A75:  BCF    0A.3
0A76:  CALL   07C
0A77:  BSF    0A.3
0A78:  DECFSZ 25,F
0A79:  GOTO   273
.................... lcd_init(); 
0A7A:  BCF    0A.3
0A7B:  CALL   0E3
0A7C:  BSF    0A.3
.................... } 
.................... if(input(pin_B5)==1){ 
0A7D:  BSF    03.5
0A7E:  BSF    06.5
0A7F:  BCF    03.5
0A80:  BTFSS  06.5
0A81:  GOTO   2B4
.................... output_low(pin_B0); 
0A82:  BSF    03.5
0A83:  BCF    06.0
0A84:  BCF    03.5
0A85:  BCF    06.0
.................... lcd_init(); 
0A86:  BCF    0A.3
0A87:  CALL   0E3
0A88:  BSF    0A.3
.................... lcd_gotoxy(1,1); 
0A89:  MOVLW  01
0A8A:  MOVWF  33
0A8B:  MOVWF  34
0A8C:  BCF    0A.3
0A8D:  CALL   118
0A8E:  BSF    0A.3
.................... printf(lcd_putc,"MODO INTELIGENTE"); 
0A8F:  MOVLW  58
0A90:  BSF    03.6
0A91:  MOVWF  0D
0A92:  MOVLW  00
0A93:  MOVWF  0F
0A94:  BCF    0A.3
0A95:  BCF    03.6
0A96:  CALL   157
0A97:  BSF    0A.3
.................... lcd_gotoxy(5,2); 
0A98:  MOVLW  05
0A99:  MOVWF  33
0A9A:  MOVLW  02
0A9B:  MOVWF  34
0A9C:  BCF    0A.3
0A9D:  CALL   118
0A9E:  BSF    0A.3
.................... printf(lcd_putc,"ACTIVADO"); 
0A9F:  MOVLW  61
0AA0:  BSF    03.6
0AA1:  MOVWF  0D
0AA2:  MOVLW  00
0AA3:  MOVWF  0F
0AA4:  BCF    0A.3
0AA5:  BCF    03.6
0AA6:  CALL   157
0AA7:  BSF    0A.3
.................... delay_ms(1000); 
0AA8:  MOVLW  04
0AA9:  MOVWF  25
0AAA:  MOVLW  FA
0AAB:  MOVWF  33
0AAC:  BCF    0A.3
0AAD:  CALL   07C
0AAE:  BSF    0A.3
0AAF:  DECFSZ 25,F
0AB0:  GOTO   2AA
.................... lcd_init(); 
0AB1:  BCF    0A.3
0AB2:  CALL   0E3
0AB3:  BSF    0A.3
.................... } 
.................... if(input(pin_B4)==1){ 
0AB4:  BSF    03.5
0AB5:  BSF    06.4
0AB6:  BCF    03.5
0AB7:  BTFSS  06.4
0AB8:  GOTO   2EC
.................... output_high(pin_B0); 
0AB9:  BSF    03.5
0ABA:  BCF    06.0
0ABB:  BCF    03.5
0ABC:  BSF    06.0
.................... lcd_init(); 
0ABD:  BCF    0A.3
0ABE:  CALL   0E3
0ABF:  BSF    0A.3
.................... lcd_gotoxy(3,1); 
0AC0:  MOVLW  03
0AC1:  MOVWF  33
0AC2:  MOVLW  01
0AC3:  MOVWF  34
0AC4:  BCF    0A.3
0AC5:  CALL   118
0AC6:  BSF    0A.3
.................... printf(lcd_putc,"MODO SEGURO"); 
0AC7:  MOVLW  66
0AC8:  BSF    03.6
0AC9:  MOVWF  0D
0ACA:  MOVLW  00
0ACB:  MOVWF  0F
0ACC:  BCF    0A.3
0ACD:  BCF    03.6
0ACE:  CALL   157
0ACF:  BSF    0A.3
.................... lcd_gotoxy(5,2); 
0AD0:  MOVLW  05
0AD1:  MOVWF  33
0AD2:  MOVLW  02
0AD3:  MOVWF  34
0AD4:  BCF    0A.3
0AD5:  CALL   118
0AD6:  BSF    0A.3
.................... printf(lcd_putc,"ACTIVADO"); 
0AD7:  MOVLW  6C
0AD8:  BSF    03.6
0AD9:  MOVWF  0D
0ADA:  MOVLW  00
0ADB:  MOVWF  0F
0ADC:  BCF    0A.3
0ADD:  BCF    03.6
0ADE:  CALL   157
0ADF:  BSF    0A.3
.................... delay_ms(1000); 
0AE0:  MOVLW  04
0AE1:  MOVWF  25
0AE2:  MOVLW  FA
0AE3:  MOVWF  33
0AE4:  BCF    0A.3
0AE5:  CALL   07C
0AE6:  BSF    0A.3
0AE7:  DECFSZ 25,F
0AE8:  GOTO   2E2
.................... lcd_init(); 
0AE9:  BCF    0A.3
0AEA:  CALL   0E3
0AEB:  BSF    0A.3
.................... } 
.................... if(input(pin_B3)==1){ 
0AEC:  BSF    03.5
0AED:  BSF    06.3
0AEE:  BCF    03.5
0AEF:  BTFSS  06.3
0AF0:  GOTO   324
.................... output_low(pin_B0); 
0AF1:  BSF    03.5
0AF2:  BCF    06.0
0AF3:  BCF    03.5
0AF4:  BCF    06.0
.................... lcd_init(); 
0AF5:  BCF    0A.3
0AF6:  CALL   0E3
0AF7:  BSF    0A.3
.................... lcd_gotoxy(3,1); 
0AF8:  MOVLW  03
0AF9:  MOVWF  33
0AFA:  MOVLW  01
0AFB:  MOVWF  34
0AFC:  BCF    0A.3
0AFD:  CALL   118
0AFE:  BSF    0A.3
.................... printf(lcd_putc,"MODO MANUAL"); 
0AFF:  MOVLW  71
0B00:  BSF    03.6
0B01:  MOVWF  0D
0B02:  MOVLW  00
0B03:  MOVWF  0F
0B04:  BCF    0A.3
0B05:  BCF    03.6
0B06:  CALL   157
0B07:  BSF    0A.3
.................... lcd_gotoxy(5,2); 
0B08:  MOVLW  05
0B09:  MOVWF  33
0B0A:  MOVLW  02
0B0B:  MOVWF  34
0B0C:  BCF    0A.3
0B0D:  CALL   118
0B0E:  BSF    0A.3
.................... printf(lcd_putc,"ACTIVADO"); 
0B0F:  MOVLW  77
0B10:  BSF    03.6
0B11:  MOVWF  0D
0B12:  MOVLW  00
0B13:  MOVWF  0F
0B14:  BCF    0A.3
0B15:  BCF    03.6
0B16:  CALL   157
0B17:  BSF    0A.3
.................... delay_ms(1000); 
0B18:  MOVLW  04
0B19:  MOVWF  25
0B1A:  MOVLW  FA
0B1B:  MOVWF  33
0B1C:  BCF    0A.3
0B1D:  CALL   07C
0B1E:  BSF    0A.3
0B1F:  DECFSZ 25,F
0B20:  GOTO   31A
.................... lcd_init(); 
0B21:  BCF    0A.3
0B22:  CALL   0E3
0B23:  BSF    0A.3
.................... } 
....................  
.................... if(input(pin_C3)==1){ 
0B24:  BSF    24.3
0B25:  MOVF   24,W
0B26:  BSF    03.5
0B27:  MOVWF  07
0B28:  BCF    03.5
0B29:  BTFSS  07.3
0B2A:  GOTO   35F
.................... output_high(pin_E0); 
0B2B:  BSF    03.5
0B2C:  BCF    09.0
0B2D:  BCF    03.5
0B2E:  BSF    09.0
.................... delay_ms(1000); 
0B2F:  MOVLW  04
0B30:  MOVWF  25
0B31:  MOVLW  FA
0B32:  MOVWF  33
0B33:  BCF    0A.3
0B34:  CALL   07C
0B35:  BSF    0A.3
0B36:  DECFSZ 25,F
0B37:  GOTO   331
.................... output_low(pin_E0); 
0B38:  BSF    03.5
0B39:  BCF    09.0
0B3A:  BCF    03.5
0B3B:  BCF    09.0
.................... delay_ms(500); 
0B3C:  MOVLW  02
0B3D:  MOVWF  25
0B3E:  MOVLW  FA
0B3F:  MOVWF  33
0B40:  BCF    0A.3
0B41:  CALL   07C
0B42:  BSF    0A.3
0B43:  DECFSZ 25,F
0B44:  GOTO   33E
.................... output_high(pin_E0); 
0B45:  BSF    03.5
0B46:  BCF    09.0
0B47:  BCF    03.5
0B48:  BSF    09.0
.................... delay_ms(1000); 
0B49:  MOVLW  04
0B4A:  MOVWF  25
0B4B:  MOVLW  FA
0B4C:  MOVWF  33
0B4D:  BCF    0A.3
0B4E:  CALL   07C
0B4F:  BSF    0A.3
0B50:  DECFSZ 25,F
0B51:  GOTO   34B
.................... output_low(pin_E0); 
0B52:  BSF    03.5
0B53:  BCF    09.0
0B54:  BCF    03.5
0B55:  BCF    09.0
.................... delay_ms(500); 
0B56:  MOVLW  02
0B57:  MOVWF  25
0B58:  MOVLW  FA
0B59:  MOVWF  33
0B5A:  BCF    0A.3
0B5B:  CALL   07C
0B5C:  BSF    0A.3
0B5D:  DECFSZ 25,F
0B5E:  GOTO   358
.................... } 
.................... if(input(pin_C2)==1){ 
0B5F:  BSF    24.2
0B60:  MOVF   24,W
0B61:  BSF    03.5
0B62:  MOVWF  07
0B63:  BCF    03.5
0B64:  BTFSS  07.2
0B65:  GOTO   39A
.................... output_high(pin_E0); 
0B66:  BSF    03.5
0B67:  BCF    09.0
0B68:  BCF    03.5
0B69:  BSF    09.0
.................... delay_ms(1000); 
0B6A:  MOVLW  04
0B6B:  MOVWF  25
0B6C:  MOVLW  FA
0B6D:  MOVWF  33
0B6E:  BCF    0A.3
0B6F:  CALL   07C
0B70:  BSF    0A.3
0B71:  DECFSZ 25,F
0B72:  GOTO   36C
.................... output_low(pin_E0); 
0B73:  BSF    03.5
0B74:  BCF    09.0
0B75:  BCF    03.5
0B76:  BCF    09.0
.................... delay_ms(500); 
0B77:  MOVLW  02
0B78:  MOVWF  25
0B79:  MOVLW  FA
0B7A:  MOVWF  33
0B7B:  BCF    0A.3
0B7C:  CALL   07C
0B7D:  BSF    0A.3
0B7E:  DECFSZ 25,F
0B7F:  GOTO   379
.................... output_high(pin_E0); 
0B80:  BSF    03.5
0B81:  BCF    09.0
0B82:  BCF    03.5
0B83:  BSF    09.0
.................... delay_ms(1000); 
0B84:  MOVLW  04
0B85:  MOVWF  25
0B86:  MOVLW  FA
0B87:  MOVWF  33
0B88:  BCF    0A.3
0B89:  CALL   07C
0B8A:  BSF    0A.3
0B8B:  DECFSZ 25,F
0B8C:  GOTO   386
.................... output_low(pin_E0); 
0B8D:  BSF    03.5
0B8E:  BCF    09.0
0B8F:  BCF    03.5
0B90:  BCF    09.0
.................... delay_ms(500); 
0B91:  MOVLW  02
0B92:  MOVWF  25
0B93:  MOVLW  FA
0B94:  MOVWF  33
0B95:  BCF    0A.3
0B96:  CALL   07C
0B97:  BSF    0A.3
0B98:  DECFSZ 25,F
0B99:  GOTO   393
.................... } 
.................... if(input(pin_C1)==1){ 
0B9A:  BSF    24.1
0B9B:  MOVF   24,W
0B9C:  BSF    03.5
0B9D:  MOVWF  07
0B9E:  BCF    03.5
0B9F:  BTFSS  07.1
0BA0:  GOTO   3D5
.................... output_high(pin_E0); 
0BA1:  BSF    03.5
0BA2:  BCF    09.0
0BA3:  BCF    03.5
0BA4:  BSF    09.0
.................... delay_ms(1000); 
0BA5:  MOVLW  04
0BA6:  MOVWF  25
0BA7:  MOVLW  FA
0BA8:  MOVWF  33
0BA9:  BCF    0A.3
0BAA:  CALL   07C
0BAB:  BSF    0A.3
0BAC:  DECFSZ 25,F
0BAD:  GOTO   3A7
.................... output_low(pin_E0); 
0BAE:  BSF    03.5
0BAF:  BCF    09.0
0BB0:  BCF    03.5
0BB1:  BCF    09.0
.................... delay_ms(500); 
0BB2:  MOVLW  02
0BB3:  MOVWF  25
0BB4:  MOVLW  FA
0BB5:  MOVWF  33
0BB6:  BCF    0A.3
0BB7:  CALL   07C
0BB8:  BSF    0A.3
0BB9:  DECFSZ 25,F
0BBA:  GOTO   3B4
.................... output_high(pin_E0); 
0BBB:  BSF    03.5
0BBC:  BCF    09.0
0BBD:  BCF    03.5
0BBE:  BSF    09.0
.................... delay_ms(1000); 
0BBF:  MOVLW  04
0BC0:  MOVWF  25
0BC1:  MOVLW  FA
0BC2:  MOVWF  33
0BC3:  BCF    0A.3
0BC4:  CALL   07C
0BC5:  BSF    0A.3
0BC6:  DECFSZ 25,F
0BC7:  GOTO   3C1
.................... output_low(pin_E0); 
0BC8:  BSF    03.5
0BC9:  BCF    09.0
0BCA:  BCF    03.5
0BCB:  BCF    09.0
.................... delay_ms(500); 
0BCC:  MOVLW  02
0BCD:  MOVWF  25
0BCE:  MOVLW  FA
0BCF:  MOVWF  33
0BD0:  BCF    0A.3
0BD1:  CALL   07C
0BD2:  BSF    0A.3
0BD3:  DECFSZ 25,F
0BD4:  GOTO   3CE
.................... } 
.................... if(input(pin_C0)==1){ 
0BD5:  BSF    24.0
0BD6:  MOVF   24,W
0BD7:  BSF    03.5
0BD8:  MOVWF  07
0BD9:  BCF    03.5
0BDA:  BTFSS  07.0
0BDB:  GOTO   410
.................... output_high(pin_E0); 
0BDC:  BSF    03.5
0BDD:  BCF    09.0
0BDE:  BCF    03.5
0BDF:  BSF    09.0
.................... delay_ms(1000); 
0BE0:  MOVLW  04
0BE1:  MOVWF  25
0BE2:  MOVLW  FA
0BE3:  MOVWF  33
0BE4:  BCF    0A.3
0BE5:  CALL   07C
0BE6:  BSF    0A.3
0BE7:  DECFSZ 25,F
0BE8:  GOTO   3E2
.................... output_low(pin_E0); 
0BE9:  BSF    03.5
0BEA:  BCF    09.0
0BEB:  BCF    03.5
0BEC:  BCF    09.0
.................... delay_ms(500); 
0BED:  MOVLW  02
0BEE:  MOVWF  25
0BEF:  MOVLW  FA
0BF0:  MOVWF  33
0BF1:  BCF    0A.3
0BF2:  CALL   07C
0BF3:  BSF    0A.3
0BF4:  DECFSZ 25,F
0BF5:  GOTO   3EF
.................... output_high(pin_E0); 
0BF6:  BSF    03.5
0BF7:  BCF    09.0
0BF8:  BCF    03.5
0BF9:  BSF    09.0
.................... delay_ms(1000); 
0BFA:  MOVLW  04
0BFB:  MOVWF  25
0BFC:  MOVLW  FA
0BFD:  MOVWF  33
0BFE:  BCF    0A.3
0BFF:  CALL   07C
0C00:  BSF    0A.3
0C01:  DECFSZ 25,F
0C02:  GOTO   3FC
.................... output_low(pin_E0); 
0C03:  BSF    03.5
0C04:  BCF    09.0
0C05:  BCF    03.5
0C06:  BCF    09.0
.................... delay_ms(500); 
0C07:  MOVLW  02
0C08:  MOVWF  25
0C09:  MOVLW  FA
0C0A:  MOVWF  33
0C0B:  BCF    0A.3
0C0C:  CALL   07C
0C0D:  BSF    0A.3
0C0E:  DECFSZ 25,F
0C0F:  GOTO   409
.................... } 
....................  
.................... }   
0C10:  GOTO   0A6
.................... } 
....................  
....................  
0C11:  SLEEP

Configuration Fuses:
   Word  1: 3F39   XT NOWDT NOPUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
